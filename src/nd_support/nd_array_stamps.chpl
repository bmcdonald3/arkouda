// this file is generated by 'parseServerConfig.py'
use CommandMap, Message, MultiTypeSymbolTable;

/////////////////////////////////////////////ArgSortMsg/////////////////////////////////////////////
use ArgSortMsg;
proc arkouda_nd_stamp_argsortMsg1D(cmd: string, msgArgs: borrowed MessageArgs, st: borrowed SymTab): MsgTuple throws
    do return argsortMsg(cmd, msgArgs, st, 1);
registerFunction("argsort1D", arkouda_nd_stamp_argsortMsg1D);
////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////EfuncMsg//////////////////////////////////////////////
use EfuncMsg;
proc arkouda_nd_stamp_efuncMsg1D(cmd: string, msgArgs: borrowed MessageArgs, st: borrowed SymTab): MsgTuple throws
    do return efuncMsg(cmd, msgArgs, st, 1);
registerFunction("efunc1D", arkouda_nd_stamp_efuncMsg1D);
////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////IndexingMsg////////////////////////////////////////////
use IndexingMsg;
proc arkouda_nd_stamp_intIndexMsg1D(cmd: string, msgArgs: borrowed MessageArgs, st: borrowed SymTab): MsgTuple throws
    do return intIndexMsg(cmd, msgArgs, st, 1);
registerFunction("[int]1D", arkouda_nd_stamp_intIndexMsg1D);

proc arkouda_nd_stamp_sliceIndexMsg1D(cmd: string, msgArgs: borrowed MessageArgs, st: borrowed SymTab): MsgTuple throws
    do return sliceIndexMsg(cmd, msgArgs, st, 1);
registerFunction("[slice]1D", arkouda_nd_stamp_sliceIndexMsg1D);

proc arkouda_nd_stamp_takeAlongAxisMsg1D(cmd: string, msgArgs: borrowed MessageArgs, st: borrowed SymTab): MsgTuple throws
    do return takeAlongAxisMsg(cmd, msgArgs, st, 1);
registerFunction("takeAlongAxis1D", arkouda_nd_stamp_takeAlongAxisMsg1D);
////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////OperatorMsg////////////////////////////////////////////
use OperatorMsg;
proc arkouda_nd_stamp_binopvvMsg1D(cmd: string, msgArgs: borrowed MessageArgs, st: borrowed SymTab): MsgTuple throws
    do return binopvvMsg(cmd, msgArgs, st, 1);
registerFunction("binopvv1D", arkouda_nd_stamp_binopvvMsg1D);

proc arkouda_nd_stamp_binopvsMsg1D(cmd: string, msgArgs: borrowed MessageArgs, st: borrowed SymTab): MsgTuple throws
    do return binopvsMsg(cmd, msgArgs, st, 1);
registerFunction("binopvs1D", arkouda_nd_stamp_binopvsMsg1D);

proc arkouda_nd_stamp_binopsvMsg1D(cmd: string, msgArgs: borrowed MessageArgs, st: borrowed SymTab): MsgTuple throws
    do return binopsvMsg(cmd, msgArgs, st, 1);
registerFunction("binopsv1D", arkouda_nd_stamp_binopsvMsg1D);

proc arkouda_nd_stamp_opeqvvMsg1D(cmd: string, msgArgs: borrowed MessageArgs, st: borrowed SymTab): MsgTuple throws
    do return opeqvvMsg(cmd, msgArgs, st, 1);
registerFunction("opeqvv1D", arkouda_nd_stamp_opeqvvMsg1D);

proc arkouda_nd_stamp_opeqvsMsg1D(cmd: string, msgArgs: borrowed MessageArgs, st: borrowed SymTab): MsgTuple throws
    do return opeqvsMsg(cmd, msgArgs, st, 1);
registerFunction("opeqvs1D", arkouda_nd_stamp_opeqvsMsg1D);
////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////RandMsg//////////////////////////////////////////////
use RandMsg;
proc arkouda_nd_stamp_randintMsg1D(cmd: string, msgArgs: borrowed MessageArgs, st: borrowed SymTab): MsgTuple throws
    do return randintMsg(cmd, msgArgs, st, 1);
registerFunction("randint1D", arkouda_nd_stamp_randintMsg1D);
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////ReductionMsg////////////////////////////////////////////
use ReductionMsg;
proc arkouda_nd_stamp_reductionMsg1D(cmd: string, msgArgs: borrowed MessageArgs, st: borrowed SymTab): MsgTuple throws
    do return reductionMsg(cmd, msgArgs, st, 1);
registerFunction("reduction1D", arkouda_nd_stamp_reductionMsg1D);
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////MsgProcessing///////////////////////////////////////////
use MsgProcessing;
proc arkouda_nd_stamp_createMsg1D(cmd: string, msgArgs: borrowed MessageArgs, st: borrowed SymTab): MsgTuple throws
    do return createMsg(cmd, msgArgs, st, 1);
registerFunction("create1D", arkouda_nd_stamp_createMsg1D);

proc arkouda_nd_stamp_setMsg1D(cmd: string, msgArgs: borrowed MessageArgs, st: borrowed SymTab): MsgTuple throws
    do return setMsg(cmd, msgArgs, st, 1);
registerFunction("set1D", arkouda_nd_stamp_setMsg1D);
////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////GenSymIO//////////////////////////////////////////////
use GenSymIO;
proc arkouda_nd_stamp_tondarrayMsg1D(cmd: string, msgArgs: borrowed MessageArgs, st: borrowed SymTab): bytes throws
    do return tondarrayMsg(cmd, msgArgs, st, 1);
registerBinaryFunction("tondarray1D", arkouda_nd_stamp_tondarrayMsg1D);
////////////////////////////////////////////////////////////////////////////////////////////////////

